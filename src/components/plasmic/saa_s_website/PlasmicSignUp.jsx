// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kHCKEcYWcmWFvnZ511qGxj
// Component: xvgVucNi7jcHD4e
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: gUUwcfxLK8qsLUf/component
import TextInput from "../../TextInput"; // plasmic-import: gT-pc3PmJGII6xG/component
import Checkbox from "../../Checkbox"; // plasmic-import: NyvHa19nioKc5uf/component
import Footer from "../../Footer"; // plasmic-import: BMHqzSi3MkEVmjN/component
import { useScreenVariants as useScreenVariantshcOoyKrhLFmmbl0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hcOoyKrhLFmmbl0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_saa_s_website.module.css"; // plasmic-import: kHCKEcYWcmWFvnZ511qGxj/projectcss
import sty from "./PlasmicSignUp.module.css"; // plasmic-import: xvgVucNi7jcHD4e/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ecjjWdQV-_PKMgR/icon
import tiffanyTertipesNxcs8Wwj9J0UnsplashjpgPsBffs03SOmWvL from "./images/tiffanyTertipesNxcs8Wwj9J0Unsplashjpg.jpg"; // plasmic-import: PSBffs03sOMWv-l/picture
import stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgEVdrvkw45L2Az5 from "./images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpg.jpg"; // plasmic-import: eVdrvkw-45l2AZ5/picture
import greenChameleonS9Cc2SKySjmUnsplashjpgY2OhgaBbwFhlcez from "./images/greenChameleonS9Cc2SKySjmUnsplashjpg.jpg"; // plasmic-import: Y2OhgaBBWFhlcez/picture

export const PlasmicSignUp__VariantProps = new Array();

export const PlasmicSignUp__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSignUp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshcOoyKrhLFmmbl0()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cxR5)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___2YMbj)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__qePnj)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__brV7D)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Sign Up"}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9JwS4
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                        }
                      </div>
                    </p.Stack>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__rwnpY)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__mz14A)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "lazy"
                          : "lazy"
                      }
                      src={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              src: stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashjpgEVdrvkw45L2Az5,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                          : {
                              src: tiffanyTertipesNxcs8Wwj9J0UnsplashjpgPsBffs03SOmWvL,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                      }
                    />
                  </div>
                </p.Stack>
              </div>
            </div>
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.columns___5PlWr)}>
                <div className={classNames(projectcss.all, sty.column___6Swp)}>
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Register"}
                    </h2>
                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__ymdCd
                      )}
                    >
                      {"Name"}
                    </label>
                    <TextInput
                      data-plasmic-name={"textInput"}
                      data-plasmic-override={overrides.textInput}
                      className={classNames("__wab_instance", sty.textInput)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "textInput",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={" "}
                      value={
                        p.generateStateValueProp($state, [
                          "textInput",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__pz8K4
                      )}
                    >
                      {"Email"}
                    </label>
                    <TextInput
                      data-plasmic-name={"textInput2"}
                      data-plasmic-override={overrides.textInput2}
                      className={classNames("__wab_instance", sty.textInput2)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "textInput2",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={" "}
                      value={
                        p.generateStateValueProp($state, [
                          "textInput2",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <label
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label__lYg0N
                      )}
                    >
                      {"Phone"}
                    </label>
                    <TextInput
                      data-plasmic-name={"textInput3"}
                      data-plasmic-override={overrides.textInput3}
                      className={classNames("__wab_instance", sty.textInput3)}
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "textInput3",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={" "}
                      value={
                        p.generateStateValueProp($state, [
                          "textInput3",
                          "value"
                        ]) ?? ""
                      }
                    />

                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "checkbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "checkbox",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__v6Pzg
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "I understand that this form is \nstoring my submitted information \nso I can be contacted."
                          : "I understand that this form is storing"}
                      </div>
                    </Checkbox>
                    <p.Stack
                      as={"a"}
                      data-plasmic-name={"link"}
                      data-plasmic-override={overrides.link}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link
                      )}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2Nj4X
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uaVbf
                        )}
                      >
                        {"Send Now"}
                      </div>
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__gIxJj)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__x8Ozi)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__l1Pp3)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: greenChameleonS9Cc2SKySjmUnsplashjpgY2OhgaBbwFhlcez,
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "textInput3",
    "checkbox",
    "link",
    "footer"
  ],

  header: ["header"],
  mainSection: [
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "textInput3",
    "checkbox",
    "link"
  ],

  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection2: [
    "mainSection2",
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "textInput3",
    "checkbox",
    "link"
  ],

  container4: [
    "container4",
    "h2",
    "textInput",
    "textInput2",
    "textInput3",
    "checkbox",
    "link"
  ],

  h2: ["h2"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  checkbox: ["checkbox"],
  link: ["link"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignUp__ArgProps,
          internalVariantPropNames: PlasmicSignUp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUp";
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    mainSection: makeNodeComponent("mainSection"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection2: makeNodeComponent("mainSection2"),
    container4: makeNodeComponent("container4"),
    h2: makeNodeComponent("h2"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    checkbox: makeNodeComponent("checkbox"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignUp;
/* prettier-ignore-end */
