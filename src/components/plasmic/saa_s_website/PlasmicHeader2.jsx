// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kHCKEcYWcmWFvnZ511qGxj
// Component: GK7fqNotJaxKqIk
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: ID408cV-KrF2KD/component
import { useScreenVariants as useScreenVariantshcOoyKrhLFmmbl0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hcOoyKrhLFmmbl0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_saa_s_website.module.css"; // plasmic-import: kHCKEcYWcmWFvnZ511qGxj/projectcss
import sty from "./PlasmicHeader2.module.css"; // plasmic-import: GK7fqNotJaxKqIk/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: z31CBqJ-LXmNTdx/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ecjjWdQV-_PKMgR/icon

export const PlasmicHeader2__VariantProps = new Array();

export const PlasmicHeader2__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHeader2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshcOoyKrhLFmmbl0()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ugjSc)}
      >
        {true ? (
          <a
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jRfC5
            )}
            href={`/`}
          >
            <Icon2Icon
              className={classNames(projectcss.all, sty.svg___3ZVGe)}
              role={"img"}
            />
          </a>
        ) : null}
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vh3Cc)}
        >
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__zTctD
            )}
            href={`/about-us`}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__vm9Dm)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sr6Kv
              )}
            >
              {"About Us"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__hmq1T)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___2EErs
            )}
            href={`/features`}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__btDdR)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fOzmA
              )}
            >
              {"Features"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__zcn5Q)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__btmqi
            )}
            href={`/pricing`}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__p1N1O)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6EvpJ
              )}
            >
              {"Pricing "}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__uB5Ev)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__dGm39
            )}
            href={`/contact`}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__e1Zll)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ee3D8
              )}
            >
              {"Contact"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__bphgu)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
          <p.Stack
            as={"a"}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__xyRkm
            )}
            href={`/blog`}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__fByq)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oOzco
              )}
            >
              {"Blog"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__l1POa)}
                role={"img"}
              />
            ) : null}
          </p.Stack>
          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button)}
            shape={"rounded"}
            submitsForm={true}
          >
            {"Get started"}
          </Button>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader2__ArgProps,
          internalVariantPropNames: PlasmicHeader2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader2";
  } else {
    func.displayName = `PlasmicHeader2.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader2 = Object.assign(
  // Top-level PlasmicHeader2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicHeader2
    internalVariantProps: PlasmicHeader2__VariantProps,
    internalArgProps: PlasmicHeader2__ArgProps
  }
);

export default PlasmicHeader2;
/* prettier-ignore-end */
