// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kHCKEcYWcmWFvnZ511qGxj
// Component: t-3ZZsbEd2AhC9Q
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header2 from "../../Header2"; // plasmic-import: GK7fqNotJaxKqIk/component
import Button from "../../Button"; // plasmic-import: ID408cV-KrF2KD/component
import HeroSection from "../../HeroSection"; // plasmic-import: juY6mhOC63OYiI0/component
import Footer from "../../Footer"; // plasmic-import: BMHqzSi3MkEVmjN/component
import { useScreenVariants as useScreenVariantshcOoyKrhLFmmbl0 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hcOoyKrhLFmmbl0/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_saa_s_website.module.css"; // plasmic-import: kHCKEcYWcmWFvnZ511qGxj/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: t-3ZZsbEd2AhC9Q/css
import ArrowRightsvgIcon from "./icons/PlasmicIcon__ArrowRightsvg"; // plasmic-import: Q1nyCXo_O37SG_I/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ecjjWdQV-_PKMgR/icon
import corinneKutzTMi2R5NfoUnsplashjpg81On6WuZbCzxt2M from "./images/corinneKutzTMi2R5NfoUnsplashjpg.jpg"; // plasmic-import: 81on6wuZbCzxt2m/picture
import brookeCagleWhwyBmtn30UnsplashjpgBidvt4Dn1Ew1SfA from "./images/brookeCagleWhwyBmtn30Unsplashjpg.jpg"; // plasmic-import: BIDVT4DN1EW1SfA/picture
import about2JpgXmFuLnTznEi8OhX from "./images/about2Jpg.jpg"; // plasmic-import: xmFuLnTznEi8OhX/picture
import reading9255891920JpgFPQwC1Tp9Hdd55R from "./images/reading9255891920Jpg.jpg"; // plasmic-import: fPQwC1TP9Hdd55r/picture

export const PlasmicAboutUs__VariantProps = new Array();

export const PlasmicAboutUs__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAboutUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshcOoyKrhLFmmbl0()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zEyBu)}>
            <Header2
              data-plasmic-name={"header2"}
              data-plasmic-override={overrides.header2}
              className={classNames("__wab_instance", sty.header2)}
            />
          </div>
          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__waQ1H)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__yDtd5)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kld7S)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"About us"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__izbfR
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </p.Stack>
                </div>
                <div className={classNames(projectcss.all, sty.column__beWv)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1Q7Dx)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: corinneKutzTMi2R5NfoUnsplashjpg81On6WuZbCzxt2M,
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </p.Stack>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3KdA)}>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <section
                data-plasmic-name={"features"}
                data-plasmic-override={overrides.features}
                className={classNames(projectcss.all, sty.features)}
              >
                <div className={classNames(projectcss.all, sty.column__b3P2N)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___6Btix
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "WHY CHOOSE US"
                      : "WHY CHOOSE US"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lHB2
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. \nLorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                    }
                  </div>
                  <div
                    data-plasmic-name={"container4"}
                    data-plasmic-override={overrides.container4}
                    className={classNames(projectcss.all, sty.container4)}
                  >
                    <div
                      data-plasmic-name={"outerRow2"}
                      data-plasmic-override={overrides.outerRow2}
                      className={classNames(projectcss.all, sty.outerRow2)}
                    >
                      <div
                        data-plasmic-name={"row2"}
                        data-plasmic-override={overrides.row2}
                        className={classNames(projectcss.all, sty.row2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__tGdEm
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__jbqe
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oDmjI
                                )}
                              />

                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__jVbXc
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Some value proposition of your service."
                                  : "Some value proposition of your service."}
                              </h3>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1ExIq
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                  : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                              </div>
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__ihTUf
                                )}
                                color={"blue"}
                                endIcon={
                                  <ArrowRightsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__qepux
                                    )}
                                    role={"img"}
                                  />
                                }
                                shape={"rounded"}
                                showEndIcon={true}
                                submitsForm={true}
                              >
                                {"Learn more"}
                              </Button>
                            </p.Stack>
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__qyxCg
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__nuzqb)}
                            displayHeight={"400px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"400px"}
                            loading={"lazy"}
                            src={{
                              src: brookeCagleWhwyBmtn30UnsplashjpgBidvt4Dn1Ew1SfA,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"container5"}
                    data-plasmic-override={overrides.container5}
                    className={classNames(projectcss.all, sty.container5)}
                  >
                    {true ? (
                      <div
                        data-plasmic-name={"outerRow3"}
                        data-plasmic-override={overrides.outerRow3}
                        className={classNames(projectcss.all, sty.outerRow3)}
                      >
                        <div
                          data-plasmic-name={"row4"}
                          data-plasmic-override={overrides.row4}
                          className={classNames(projectcss.all, sty.row4)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__ufUi0
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img___8QsjI)}
                              displayHeight={"auto"}
                              displayMaxHeight={"none"}
                              displayMaxWidth={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "100%"
                                  : "100%"
                              }
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "lazy"
                                  : "lazy"
                              }
                              src={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? {
                                      src: about2JpgXmFuLnTznEi8OhX,
                                      fullWidth: 570,
                                      fullHeight: 650,
                                      aspectRatio: undefined
                                    }
                                  : {
                                      src: about2JpgXmFuLnTznEi8OhX,
                                      fullWidth: 570,
                                      fullHeight: 650,
                                      aspectRatio: undefined
                                    }
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__jJk52
                            )}
                          >
                            <h2
                              className={classNames(
                                projectcss.all,
                                projectcss.h2,
                                projectcss.__wab_text,
                                sty.h2__a7JTh
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "We Execute Our Ideas \nThe Start To Finish."
                                : "We Execute Our Ideas \nThe Start To Finish."}
                            </h2>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__haVsJ
                              )}
                            >
                              {
                                "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged."
                              }
                            </div>
                            <p.Stack
                              as={"a"}
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link
                              )}
                            >
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__pWgnA
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ztiU4
                                )}
                              >
                                {"LEARN More"}
                              </div>
                              {false ? (
                                <IconIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fasGv
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </p.Stack>
                          </div>
                        </div>
                      </div>
                    ) : null}
                  </div>
                  <div
                    data-plasmic-name={"container6"}
                    data-plasmic-override={overrides.container6}
                    className={classNames(projectcss.all, sty.container6)}
                  >
                    <div
                      data-plasmic-name={"outerRow4"}
                      data-plasmic-override={overrides.outerRow4}
                      className={classNames(projectcss.all, sty.outerRow4)}
                    >
                      <div
                        data-plasmic-name={"row3"}
                        data-plasmic-override={overrides.row3}
                        className={classNames(projectcss.all, sty.row3)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__oNaUt
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__hva9P)}
                            displayHeight={"400px"}
                            displayMaxHeight={"none"}
                            displayMaxWidth={"none"}
                            displayMinHeight={"0"}
                            displayMinWidth={"0"}
                            displayWidth={"400px"}
                            loading={"lazy"}
                            src={{
                              src: reading9255891920JpgFPQwC1Tp9Hdd55R,
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.column__sKu
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vUdYf
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cEc1
                                )}
                              />

                              <h3
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h3,
                                  projectcss.__wab_text,
                                  sty.h3__rvqum
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Some value proposition of your service."
                                  : "Some value proposition of your service."}
                              </h3>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pDrt
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                                  : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                              </div>
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__g1NRw
                                )}
                                color={"blue"}
                                endIcon={
                                  <ArrowRightsvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__nNhyB
                                    )}
                                    role={"img"}
                                  />
                                }
                                shape={"rounded"}
                                showEndIcon={true}
                                submitsForm={true}
                              >
                                {"Learn more"}
                              </Button>
                            </p.Stack>
                          ) : null}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
            ) : null}
            <HeroSection
              data-plasmic-name={"heroSection"}
              data-plasmic-override={overrides.heroSection}
              className={classNames("__wab_instance", sty.heroSection)}
            />
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header2",
    "pageBanner",
    "columns",
    "h1",
    "features",
    "container4",
    "outerRow2",
    "row2",
    "container5",
    "outerRow3",
    "row4",
    "link",
    "container6",
    "outerRow4",
    "row3",
    "heroSection",
    "footer"
  ],

  header2: ["header2"],
  pageBanner: ["pageBanner", "columns", "h1"],
  columns: ["columns", "h1"],
  h1: ["h1"],
  features: [
    "features",
    "container4",
    "outerRow2",
    "row2",
    "container5",
    "outerRow3",
    "row4",
    "link",
    "container6",
    "outerRow4",
    "row3"
  ],

  container4: ["container4", "outerRow2", "row2"],
  outerRow2: ["outerRow2", "row2"],
  row2: ["row2"],
  container5: ["container5", "outerRow3", "row4", "link"],
  outerRow3: ["outerRow3", "row4", "link"],
  row4: ["row4", "link"],
  link: ["link"],
  container6: ["container6", "outerRow4", "row3"],
  outerRow4: ["outerRow4", "row3"],
  row3: ["row3"],
  heroSection: ["heroSection"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header2: makeNodeComponent("header2"),
    pageBanner: makeNodeComponent("pageBanner"),
    columns: makeNodeComponent("columns"),
    h1: makeNodeComponent("h1"),
    features: makeNodeComponent("features"),
    container4: makeNodeComponent("container4"),
    outerRow2: makeNodeComponent("outerRow2"),
    row2: makeNodeComponent("row2"),
    container5: makeNodeComponent("container5"),
    outerRow3: makeNodeComponent("outerRow3"),
    row4: makeNodeComponent("row4"),
    link: makeNodeComponent("link"),
    container6: makeNodeComponent("container6"),
    outerRow4: makeNodeComponent("outerRow4"),
    row3: makeNodeComponent("row3"),
    heroSection: makeNodeComponent("heroSection"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
